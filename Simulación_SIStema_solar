import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Constantes
G = 6.67430e-11  # Constante gravitatoria
masa_sol = 1.989e30  # Masa del Sol en kg

# Datos de los planetas (distancia inicial, velocidad inicial)
# Distancias en metros, velocidades en m/s
datos_planetas = {
    'Mercurio': [0.39 * 1.496e11, 47.87e3],
    'Venus': [0.72 * 1.496e11, 35.02e3],
    'Tierra': [1.0 * 1.496e11, 30e3],
    'Marte': [1.52 * 1.496e11, 24.08e3],
    'Jupiter': [5.20 * 1.496e11, 13.07e3],
    'Saturno': [9.58 * 1.496e11, 9.69e3],
    'Urano': [19.18 * 1.496e11, 6.81e3],
    'Neptuno': [30.07 * 1.496e11, 5.43e3]
}

def movimiento_planetas(t, y):
    dydt = np.zeros_like(y)

    num_planetas = len(datos_planetas)

    for i in range(num_planetas):
        xi, yi, vxi, vyi = y[i * 4:(i + 1) * 4]
        ax = 0
        ay = 0

        # Solo calculamos la interacción con el Sol, que asumimos está en el origen
        rij_x = xi
        rij_y = yi
        rij = np.sqrt(rij_x**2 + rij_y**2)

        # La aceleración debe ser negativa porque la fuerza gravitatoria es una fuerza de atracción.
        ax -= (G * masa_sol * rij_x) / rij**3
        ay -= (G * masa_sol * rij_y) / rij**3

        dydt[i * 4] = vxi
        dydt[i * 4 + 1] = vyi
        dydt[i * 4 + 2] = ax
        dydt[i * 4 + 3] = ay

    return dydt

# Condiciones iniciales
condiciones_iniciales = []

for planeta, datos in datos_planetas.items():
    x0 = datos[0]
    v0 = datos[1]
    condiciones_iniciales.extend([x0, 0, 0, v0])

# Tiempo de simulación
t_inicio = 0
t_fin = 165 * 365 * 24 * 60 * 60  # Simulación de 200 años en segundos
t_eval = np.linspace(t_inicio, t_fin, 10000)  # Aumentamos el número de puntos de evaluación en el tiempo

# Realizar la simulación
solucion = solve_ivp(movimiento_planetas, [t_inicio, t_fin], condiciones_iniciales, t_eval=t_eval, method='DOP853', rtol=1e-10, atol=1e-10)

# Graficar las órbitas de los planetas
plt.figure(figsize=(8, 8))

for i, planeta in enumerate(datos_planetas.keys()):
    indice_inicio = i * 4
    plt.plot(solucion.y[indice_inicio] / 1.496e11, solucion.y[indice_inicio + 1] / 1.496e11, label=planeta)

# Representación del Sol en el gráfico
plt.scatter(0, 0, color='yellow', s=100, marker='o', label='Sol')  # Tamaño del Sol aumentado para mejor visualización
plt.title('Órbitas de los planetas alrededor del Sol')
plt.xlabel('Posición en x (UA)')
plt.ylabel('Posición en y (UA)')
plt.legend()
plt.grid(True)
plt.show()
