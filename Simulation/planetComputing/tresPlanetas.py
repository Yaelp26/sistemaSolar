import numpy as np

def tres_planetas(X, m1, m2, m3, m4, m5, m6):
    XP = np.zeros(30)
    G = 6.672e-11
    
    XP[0:15] = X[15:30]

    L12 = np.sqrt((X[0] - X[2])**2 + (X[1] - X[3])**2)
    L13 = np.sqrt((X[0] - X[4])**2 + (X[1] - X[5])**2)
    L14 = np.sqrt((X[0] - X[6])**2 + (X[1] - X[7])**2)
    L15 = np.sqrt((X[0] - X[8])**2 + (X[1] - X[9])**2)
    L16 = np.sqrt((X[4] - X[8])**2 + (X[5] - X[9])**2)
    L21 = np.sqrt((X[2] - X[0])**2 + (X[3] - X[1])**2)
    L23 = np.sqrt((X[2] - X[4])**2 + (X[3] - X[5])**2)
    L24 = np.sqrt((X[2] - X[6])**2 + (X[3] - X[7])**2)
    L25 = np.sqrt((X[2] - X[8])**2 + (X[3] - X[9])**2)
    L26 = np.sqrt((X[2] - X[10])**2 + (X[3] - X[11])**2)
    L31 = np.sqrt((X[4] - X[0])**2 + (X[5] - X[1])**2)
    L32 = np.sqrt((X[4] - X[2])**2 + (X[5] - X[3])**2)
    L34 = np.sqrt((X[4] - X[6])**2 + (X[5] - X[7])**2)
    L35 = np.sqrt((X[4] - X[8])**2 + (X[5] - X[9])**2)
    L36 = np.sqrt((X[4] - X[10])**2 + (X[5] - X[11])**2)
    L41 = np.sqrt((X[6] - X[0])**2 + (X[7] - X[1])**2)
    L42 = np.sqrt((X[6] - X[2])**2 + (X[7] - X[3])**2)
    L43 = np.sqrt((X[6] - X[4])**2 + (X[7] - X[5])**2)
    L45 = np.sqrt((X[6] - X[8])**2 + (X[7] - X[9])**2)
    L46 = np.sqrt((X[6] - X[10])**2 + (X[7] - X[11])**2)
    L51 = np.sqrt((X[8] - X[0])**2 + (X[9] - X[1])**2)
    L52 = np.sqrt((X[8] - X[2])**2 + (X[9] - X[3])**2)
    L53 = np.sqrt((X[8] - X[4])**2 + (X[9] - X[5])**2)
    L54 = np.sqrt((X[8] - X[6])**2 + (X[9] - X[7])**2)
    L56 = np.sqrt((X[8] - X[10])**2 + (X[9] - X[11])**2)
    L61 = np.sqrt((X[10] - X[0])**2 + (X[11] - X[1])**2)
    L62 = np.sqrt((X[10] - X[2])**2 + (X[11] - X[3])**2)
    L63 = np.sqrt((X[10] - X[4])**2 + (X[11] - X[5])**2)
    L64 = np.sqrt((X[10] - X[6])**2 + (X[11] - X[7])**2)
    L65 = np.sqrt((X[10] - X[8])**2 + (X[11] - X[9])**2)
    
    XP[15] = -G * m2 * (X[0] - X[2]) / L12**3 - G * m3 * (X[0] - X[4]) / L13**3 - G * m4 * (X[0] - X[6]) / L14**3 - G * m5 * (X[0] - X[8]) / L15**3 - G * m6 * (X[0] - X[10]) / L16**3
    XP[16] = -G * m2 * (X[1] - X[3]) / L12**3 - G * m3 * (X[1] - X[5]) / L13**3 - G * m4 * (X[1] - X[7]) / L14**3 - G * m5 * (X[1] - X[9]) / L15**3 - G * m6 * (X[1] - X[11]) / L16**3
    XP[17] = -G * m1 * (X[2] - X[0]) / L21**3 - G * m3 * (X[2] - X[4]) / L23**3 - G * m4 * (X[2] - X[6]) / L24**3 - G * m5 * (X[2] - X[8]) / L25**3 - G * m6 * (X[2] - X[10]) / L26**3
    XP[18] = -G * m1 * (X[3] - X[1]) / L21**3 - G * m3 * (X[3] - X[5]) / L23**3 - G * m4 * (X[3] - X[7]) / L24**3 - G * m5 * (X[3] - X[9]) / L25**3 - G * m6 * (X[3] - X[11]) / L26**3
    XP[19] = -G * m1 * (X[4] - X[0]) / L31**3 - G * m2 * (X[4] - X[2]) / L32**3 - G * m4 * (X[4] - X[6]) / L34**3 - G * m5 * (X[4] - X[8]) / L35**3 - G * m6 * (X[4] - X[10]) / L36**3
    XP[20] = -G * m1 * (X[5] - X[1]) / L31**3 - G * m2 * (X[5] - X[3]) / L32**3 - G * m4 * (X[5] - X[7]) / L34**3 - G * m5 * (X[5] - X[9]) / L35**3 - G * m6 * (X[5] - X[11]) / L36**3
    XP[21] = -G * m1 * (X[6] - X[0]) / L41**3 - G * m2 * (X[6] - X[2]) / L42**3 - G * m3 * (X[6] - X[4]) / L43**3 - G * m5 * (X[6] - X[8]) / L45**3 - G * m6 * (X[6] - X[10]) / L46**3
    XP[22] = -G * m1 * (X[7] - X[1]) / L41**3 - G * m2 * (X[7] - X[3]) / L42**3 - G * m3 * (X[7] - X[5]) / L43**3 - G * m5 * (X[7] - X[9]) / L45**3 - G * m6 * (X[7] - X[11]) / L46**3
    XP[23] = -G * m1 * (X[8] - X[0]) / L51**3 - G * m2 * (X[8] - X[2]) / L52**3 - G * m3 * (X[8] - X[4]) / L53**3 - G * m4 * (X[8] - X[6]) / L54**3 - G * m6 * (X[8] - X[10]) / L56**3
    XP[24] = -G * m1 * (X[9] - X[1]) / L51**3 - G * m2 * (X[9] - X[3]) / L52**3 - G * m3 * (X[9] - X[5]) / L53**3 - G * m4 * (X[9] - X[7]) / L54**3 - G * m6 * (X[9] - X[11]) / L56**3
    XP[25] = -G * m1 * (X[10] - X[0]) / L61**3 - G * m2 * (X[10] - X[2]) / L62**3 - G * m3 * (X[10] - X[4]) / L63**3 - G * m4 * (X[10] - X[6]) / L64**3 - G * m5 * (X[10] - X[8]) / L65**3
    XP[26] = -G * m1 * (X[11] - X[1]) / L61**3 - G * m2 * (X[11] - X[3]) / L62**3 - G * m3 * (X[11] - X[5]) / L63**3 - G * m4 * (X[11] - X[7]) / L64**3 - G * m5 * (X[11] - X[9]) / L65**3
    XP[27] = -G * m1 * (X[12] - X[14]) / L12**3 - G * m3 * (X[12] - X[16]) / L13**3 - G * m4 * (X[12] - X[18]) / L14**3 - G * m5 * (X[12] - X[20]) / L15**3 - G * m6 * (X[12] - X[22]) / L16**3
    XP[28] = -G * m1 * (X[13] - X[15]) / L12**3 - G * m3 * (X[13] - X[17]) / L13**3 - G * m4 * (X[13] - X[19]) / L14**3 - G * m5 * (X[13] - X[21]) / L15**3 - G * m6 * (X[13] - X[23]) / L16**3
    XP[29] = -G * m2 * (X[14] - X[12]) / L12**3 - G * m3 * (X[14] - X[16]) / L23**3 - G * m4 * (X[14] - X[18]) / L24**3 - G * m5 * (X[14] - X[20]) / L25**3 - G * m6 * (X[14] - X[22]) / L26**3
    
    XP[15:30] = np.tanh(XP[15:30]*0.01)/0.01

    return XP
